-- create tables
create table client (
    id                             number generated by default on null as identity 
                                   constraint client_id_pk primary key,
    first_name                     varchar2(255 char),
    last_name                      varchar2(255 char),
    date_first_pucharse            date,
    number_phone                   number,
    adress_house                   varchar2(50 char),
    email                          varchar2(255 char),
    city                           varchar2(255 char)
)
;

audit all on client;


-- triggers
create or replace trigger client_biu
    before insert or update 
    on client
    for each row
begin
    :new.first_name := lower(:new.first_name);
    :new.last_name := lower(:new.last_name);
end client_biu;
/


-- history tracking
create sequence history_seq;
create table history (
    id                  number primary key,
    table_name          varchar2(128),
    column_name         varchar2(128),
    action              varchar2(1) check (action in ('I','U','D')),
    action_date         date,
    action_by           varchar2(255),
    data_type           varchar2(255),
    pk1                 number,
    tab_row_version     integer,
    old_vc              varchar2(4000),
    new_vc              varchar2(4000),
    old_number          number,
    new_number          number,
    old_date            date,
    new_date            date,
    old_ts              timestamp,
    new_ts              timestamp,
    old_tswtz           timestamp with time zone,
    new_tswtz           timestamp with time zone,
    old_tswltz          timestamp with local time zone,
    new_tswltz          timestamp with local time zone,
    old_clob            clob,
    new_clob            clob,
    old_blob            blob,
    new_blob            blob
)
/

create index history_idx1 on history (pk1);
create index history_idx2 on history (table_name, column_name);

create or replace view history_v as
select id,
       table_name,
       column_name,
       decode(action,'U','Update','D','Delete') action,
       action_date,
       action_by,
       pk1 table_primary_key,
       tab_row_version table_row_version,
       decode(data_type,
         'NUMBER',old_number||' > '||new_number,
         'VARCHAR2',substr(old_vc,1,50)||' > '||substr(new_vc,1,50),
         'DATE',to_char(old_date,'YYYYMMDD HH24:MI:SS')||' > '||to_char(new_date,'YYYYMMDD HH24:MI:SS'),
         'TIMESTAMP',to_char(old_ts,'YYYYMMDD HH24:MI:SS')||' > '||to_char(new_ts,'YYYYMMDD HH24:MI:SS'),
         'TIMESTAMP WITH TIMEZONE',to_char(old_tswtz,'YYYYMMDD HH24:MI:SS')||' > '||to_char(new_tswtz,'YYYYMMDD HH24:MI:SS'),
         'TIMESTAMP WITH LOCAL TIMEZONE',to_char(old_tswltz,'YYYYMMDD HH24:MI:SS')||' > '||to_char(new_tswltz,'YYYYMMDD HH24:MI:SS'),
         'BLOB','length '||sys.dbms_lob.getlength(old_blob)||' > '||' length '||sys.dbms_lob.getlength(new_blob),
         'CLOB',sys.dbms_lob.substr(old_vc,50,1)||' > '||sys.dbms_lob.substr(new_vc,50,1)
         ) change
from history
/

create or replace trigger client_aud 
    after update or delete on client
    for each row
declare
    t varchar2(128) := 'CLIENT';
    u varchar2(128) := coalesce(sys_context('APEX$SESSION','APP_USER'),user);
begin
if updating then
    if (:old.id is null and :new.id is not null) or 
        (:old.id is not null and :new.id is null) or 
        :old.id != :new.id then 
        insert into history (
            id, table_name, column_name, pk1, tab_row_version, action, action_date, action_by, data_type, old_number, new_number
        ) values (
            history_seq.nextval, t, 'ID', :old.id, null, 'U', sysdate, u, 'NUMBER', :old.id, :new.id);

    end if;
    if (:old.first_name is null and :new.first_name is not null) or 
        (:old.first_name is not null and :new.first_name is null) or 
        :old.first_name != :new.first_name then 
        insert into history (
            id, table_name, column_name, pk1, tab_row_version, action, action_date, action_by, data_type, old_vc, new_vc
        ) values (
            history_seq.nextval, t, 'FIRST_NAME', :old.id, null, 'U', sysdate, u, 'VARCHAR2', :old.first_name, :new.first_name);

    end if;
    if (:old.last_name is null and :new.last_name is not null) or 
        (:old.last_name is not null and :new.last_name is null) or 
        :old.last_name != :new.last_name then 
        insert into history (
            id, table_name, column_name, pk1, tab_row_version, action, action_date, action_by, data_type, old_vc, new_vc
        ) values (
            history_seq.nextval, t, 'LAST_NAME', :old.id, null, 'U', sysdate, u, 'VARCHAR2', :old.last_name, :new.last_name);

    end if;
    if (:old.date_first_pucharse is null and :new.date_first_pucharse is not null) or 
        (:old.date_first_pucharse is not null and :new.date_first_pucharse is null) or 
        :old.date_first_pucharse != :new.date_first_pucharse then 
        insert into history (
            id, table_name, column_name, pk1, tab_row_version, action, action_date, action_by, data_type, old_date, new_date
        ) values (
            history_seq.nextval, t, 'DATE_FIRST_PUCHARSE', :old.id, null, 'U', sysdate, u, 'DATE', :old.date_first_pucharse, :new.date_first_pucharse);

    end if;
    if (:old.number_phone is null and :new.number_phone is not null) or 
        (:old.number_phone is not null and :new.number_phone is null) or 
        :old.number_phone != :new.number_phone then 
        insert into history (
            id, table_name, column_name, pk1, tab_row_version, action, action_date, action_by, data_type, old_number, new_number
        ) values (
            history_seq.nextval, t, 'NUMBER_PHONE', :old.id, null, 'U', sysdate, u, 'NUMBER', :old.number_phone, :new.number_phone);

    end if;
    if (:old.adress_house is null and :new.adress_house is not null) or 
        (:old.adress_house is not null and :new.adress_house is null) or 
        :old.adress_house != :new.adress_house then 
        insert into history (
            id, table_name, column_name, pk1, tab_row_version, action, action_date, action_by, data_type, old_vc, new_vc
        ) values (
            history_seq.nextval, t, 'ADRESS_HOUSE', :old.id, null, 'U', sysdate, u, 'VARCHAR2', :old.adress_house, :new.adress_house);

    end if;
    if (:old.email is null and :new.email is not null) or 
        (:old.email is not null and :new.email is null) or 
        :old.email != :new.email then 
        insert into history (
            id, table_name, column_name, pk1, tab_row_version, action, action_date, action_by, data_type, old_vc, new_vc
        ) values (
            history_seq.nextval, t, 'EMAIL', :old.id, null, 'U', sysdate, u, 'VARCHAR2', :old.email, :new.email);

    end if;
    if (:old.city is null and :new.city is not null) or 
        (:old.city is not null and :new.city is null) or 
        :old.city != :new.city then 
        insert into history (
            id, table_name, column_name, pk1, tab_row_version, action, action_date, action_by, data_type, old_vc, new_vc
        ) values (
            history_seq.nextval, t, 'CITY', :old.id, null, 'U', sysdate, u, 'VARCHAR2', :old.city, :new.city);

    end if;
elsif deleting then
    insert into history (
        id, table_name, column_name, pk1, tab_row_version, action, action_date, action_by, data_type, old_number, new_number
    ) values (
        history_seq.nextval, t, 'ID', :old.id, null, 'D', sysdate, u, 'NUMBER', :old.id, :new.id);
    insert into history (
        id, table_name, column_name, pk1, tab_row_version, action, action_date, action_by, data_type, old_vc, new_vc
    ) values (
        history_seq.nextval, t, 'FIRST_NAME', :old.id, null, 'D', sysdate, u, 'VARCHAR2', :old.first_name, :new.first_name);
    insert into history (
        id, table_name, column_name, pk1, tab_row_version, action, action_date, action_by, data_type, old_vc, new_vc
    ) values (
        history_seq.nextval, t, 'LAST_NAME', :old.id, null, 'D', sysdate, u, 'VARCHAR2', :old.last_name, :new.last_name);
    insert into history (
        id, table_name, column_name, pk1, tab_row_version, action, action_date, action_by, data_type, old_date, new_date
    ) values (
        history_seq.nextval, t, 'DATE_FIRST_PUCHARSE', :old.id, null, 'D', sysdate, u, 'DATE', :old.date_first_pucharse, :new.date_first_pucharse);
    insert into history (
        id, table_name, column_name, pk1, tab_row_version, action, action_date, action_by, data_type, old_number, new_number
    ) values (
        history_seq.nextval, t, 'NUMBER_PHONE', :old.id, null, 'D', sysdate, u, 'NUMBER', :old.number_phone, :new.number_phone);
    insert into history (
        id, table_name, column_name, pk1, tab_row_version, action, action_date, action_by, data_type, old_vc, new_vc
    ) values (
        history_seq.nextval, t, 'ADRESS_HOUSE', :old.id, null, 'D', sysdate, u, 'VARCHAR2', :old.adress_house, :new.adress_house);
    insert into history (
        id, table_name, column_name, pk1, tab_row_version, action, action_date, action_by, data_type, old_vc, new_vc
    ) values (
        history_seq.nextval, t, 'EMAIL', :old.id, null, 'D', sysdate, u, 'VARCHAR2', :old.email, :new.email);
    insert into history (
        id, table_name, column_name, pk1, tab_row_version, action, action_date, action_by, data_type, old_vc, new_vc
    ) values (
        history_seq.nextval, t, 'CITY', :old.id, null, 'D', sysdate, u, 'VARCHAR2', :old.city, :new.city);

end if;
end client_aud;
/


-- APIs --
create or replace package client_api
is
 
    /* example:
        declare
            l_first_name                    varchar2(255);
            l_last_name                     varchar2(255);
            l_date_first_pucharse           date;
            l_number_phone                  number;
            l_adress_house                  varchar2(50);
            l_email                         varchar2(255);
            l_city                          varchar2(255);
        begin
        client_api.get_row (
            p_id                            => 1,
            p_first_name                    => l_first_name,
            p_last_name                     => l_last_name,
            p_date_first_pucharse           => l_date_first_pucharse,
            p_number_phone                  => l_number_phone,
            p_adress_house                  => l_adress_house,
            p_email                         => l_email,
            p_city                          => l_city
            );
        end;
    */

    procedure get_row (
        p_id                           in number,
        P_first_name                   out varchar2,
        P_last_name                    out varchar2,
        P_date_first_pucharse          out date,
        P_number_phone                 out number,
        P_adress_house                 out varchar2,
        P_email                        out varchar2,
        P_city                         out varchar2
    );
 
    /* example:
        begin
        client_api.insert_row (
            p_id                          => null,
            p_first_name                  => null,
            p_last_name                   => null,
            p_date_first_pucharse         => null,
            p_number_phone                => null,
            p_adress_house                => null,
            p_email                       => null,
            p_city                        => null
            );
        end;
    */

    procedure insert_row  (
        p_id                           in number default null,
        p_first_name                   in varchar2 default null,
        p_last_name                    in varchar2 default null,
        p_date_first_pucharse          in date default null,
        p_number_phone                 in number default null,
        p_adress_house                 in varchar2 default null,
        p_email                        in varchar2 default null,
        p_city                         in varchar2 default null
    );
    procedure update_row  (
        p_id                           in number default null,
        p_first_name                   in varchar2 default null,
        p_last_name                    in varchar2 default null,
        p_date_first_pucharse          in date default null,
        p_number_phone                 in number default null,
        p_adress_house                 in varchar2 default null,
        p_email                        in varchar2 default null,
        p_city                         in varchar2 default null
    );
    procedure delete_row (
        p_id                           in number
    );
end client_api;
/


create or replace package  body client_api
is
 
    procedure get_row (
        p_id                           in number,
        P_first_name                   out varchar2,
        P_last_name                    out varchar2,
        P_date_first_pucharse          out date,
        P_number_phone                 out number,
        P_adress_house                 out varchar2,
        P_email                        out varchar2,
        P_city                         out varchar2
    )
    is
    begin
        for c1 in (select * from client where id = p_id) loop
            p_first_name := c1.first_name;
            p_last_name := c1.last_name;
            p_date_first_pucharse := c1.date_first_pucharse;
            p_number_phone := c1.number_phone;
            p_adress_house := c1.adress_house;
            p_email := c1.email;
            p_city := c1.city;
        end loop;
    end get_row;

 
    procedure insert_row  (
        p_id                           in number default null,
        p_first_name                   in varchar2 default null,
        p_last_name                    in varchar2 default null,
        p_date_first_pucharse          in date default null,
        p_number_phone                 in number default null,
        p_adress_house                 in varchar2 default null,
        p_email                        in varchar2 default null,
        p_city                         in varchar2 default null
    )
    is
    begin
        insert into client (
            id,
            first_name,
            last_name,
            date_first_pucharse,
            number_phone,
            adress_house,
            email,
            city
        ) values (
            p_id,
            p_first_name,
            p_last_name,
            p_date_first_pucharse,
            p_number_phone,
            p_adress_house,
            p_email,
            p_city
        );
    end insert_row;

    procedure update_row  (
        p_id                           in number default null,
        p_first_name                   in varchar2 default null,
        p_last_name                    in varchar2 default null,
        p_date_first_pucharse          in date default null,
        p_number_phone                 in number default null,
        p_adress_house                 in varchar2 default null,
        p_email                        in varchar2 default null,
        p_city                         in varchar2 default null
    )
    is
    begin
        update  client set 
            id = p_id,
            first_name = p_first_name,
            last_name = p_last_name,
            date_first_pucharse = p_date_first_pucharse,
            number_phone = p_number_phone,
            adress_house = p_adress_house,
            email = p_email,
            city = p_city
        where id = p_id;
    end update_row;

    procedure delete_row (
        p_id                           in number
    )
    is
    begin
        delete from client where id = p_id;
    end delete_row;

end client_api;
/



-- load data
 
insert into client (
    id,
    first_name,
    last_name,
    date_first_pucharse,
    number_phone,
    adress_house,
    email,
    city
) values (
    1,
    'Gricelda',
    'Luebbers',
    sysdate - 94,
    3,
    'Diam Suscipit Elementum Sodales',
    'gricelda.luebbers@aaab.com',
    'Tanquecitos'
);

commit;
-- load data
select 
    ID,
    FIRST_NAME,
    LAST_NAME,
    DATE_FIRST_PUCHARSE,
    NUMBER_PHONE,
    ADRESS_HOUSE,
    EMAIL,
    CITY
from CLIENT;

 
-- Generated by Quick SQL Lunes Noviembre 23, 2020  03:25:00
 
/*
CLIENT /insert 1 /history /api /audit /select
    first name /lower
    last name /lower
    date first pucharse
    number phone
    adress_house vc50
    email
    city

# settings = { PK: "IDENTITY", semantics: "CHAR", language: "EN", APEX: true }
*/
